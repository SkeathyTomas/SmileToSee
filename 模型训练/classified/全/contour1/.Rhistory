library("e1071")
data = read.csv("F:/study/SRTP/模型训练/classified/全/contour1/contour1_select.csv")#训练集
testdata = read.csv("F:/study/SRTP/模型训练/classified/全/contour1/contour1.csv")#测试集
x = data[,1:38]#特征变量
y = data[,39]#结果变量
modelx = x
modely = y
model = svm(modelx,modely,type = "C-classification",kernel = "radial",gamma = if(is.vector(modelx)) 1 else 1/ncol(modelx))
pred = predict(model,x)
table(pred,y)
testx = testdata[,1:38]
testy = testdata[,39]
mean(y != predict(model,x))#训练集误差
mean(testy != predict(model,testx))#测试集误差
View(data)
modelx = x[c(1,2),]
modely = y[c(1,2)]
model = svm(modelx,modely,type = "C-classification",kernel = "radial",gamma = if(is.vector(modelx)) 1 else 1/ncol(modelx))
pred = predict(model,x)
table(pred,y)
mean(y != predict(model,x))#训练集误差
mean(testy != predict(model,testx))#测试集误差
View(data)
modelx = x[c(1,16,2,3),]
modely = y[c(1,16,2,3)]
model = svm(modelx,modely,type = "C-classification",kernel = "radial",gamma = if(is.vector(modelx)) 1 else 1/ncol(modelx))
pred = predict(model,x)
pred = predict(model,x)
library("e1071")
modelx = x[c(1,16,2,3),]
modely = y[c(1,16,2,3)]
model = svm(modelx,modely,type = "C-classification",kernel = "radial",gamma = if(is.vector(modelx)) 1 else 1/ncol(modelx))
pred = predict(model,x)
table(pred,y)
testx = testdata[,1:38]
testy = testdata[,39]
mean(y != predict(model,x))#训练集误差
mean(testy != predict(model,testx))#测试集误差
View(testx)
modelx = x[c(1,3),]
modely = y[c(1,3)]
model = svm(modelx,modely,type = "C-classification",kernel = "radial",gamma = if(is.vector(modelx)) 1 else 1/ncol(modelx))
pred = predict(model,x)
table(pred,y)
testx = testdata[,1:38]
testy = testdata[,39]
mean(y != predict(model,x))#训练集误差
mean(testy != predict(model,testx))#测试集误差
modelx = x[c(1,12),]
modely = y[c(1,12)]
model = svm(modelx,modely,type = "C-classification",kernel = "radial",gamma = if(is.vector(modelx)) 1 else 1/ncol(modelx))
pred = predict(model,x)
table(pred,y)
mean(y != predict(model,x))#训练集误差
mean(testy != predict(model,testx))#测试集误差
modelx = x[c(1,9),]
modely = y[c(1,9)]
model = svm(modelx,modely,type = "C-classification",kernel = "radial",gamma = if(is.vector(modelx)) 1 else 1/ncol(modelx))
pred = predict(model,x)
table(pred,y)
mean(y != predict(model,x))#训练集误差
mean(testy != predict(model,testx))#测试集误差
modelx = x[c(1,51),]
modely = y[c(1,51)]
model = svm(modelx,modely,type = "C-classification",kernel = "radial",gamma = if(is.vector(modelx)) 1 else 1/ncol(modelx))
pred = predict(model,x)
modelx = x[c(1,51),]
modely = y[c(1,51)]
model = svm(modelx,modely,type = "C-classification",kernel = "radial",gamma = if(is.vector(modelx)) 1 else 1/ncol(modelx))
modelx = x[c(1,9),]
modely = y[c(1,9)]
model = svm(modelx,modely,type = "C-classification",kernel = "radial",gamma = if(is.vector(modelx)) 1 else 1/ncol(modelx))
modelx = x[c(2,8),]
modely = y[c(2,8)]
model = svm(modelx,modely,type = "C-classification",kernel = "radial",gamma = if(is.vector(modelx)) 1 else 1/ncol(modelx))
pred = predict(model,x)
table(pred,y)
testx = testdata[,1:38]
mean(y != predict(model,x))#训练集误差
mean(testy != predict(model,testx))#测试集误差
modelx = x[16:19,]
modely = y[16:19]
model = svm(modelx,modely,type = "C-classification",kernel = "radial",gamma = if(is.vector(modelx)) 1 else 1/ncol(modelx))
pred = predict(model,x)
table(pred,y)
mean(y != predict(model,x))#训练集误差
mean(testy != predict(model,testx))#测试集误差
